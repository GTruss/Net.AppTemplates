// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

using MediatR;

using App.Data.Models;
using App.SharedKernel;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;

#nullable disable

namespace App.Data.Sandbox;

public partial class SandboxContext : DbContext
{
    private readonly IMediator _mediator;

    public SandboxContext(DbContextOptions<SandboxContext> options, IMediator mediator)
        : base(options) {
        _mediator = mediator;
    }

    public virtual DbSet<Log> Logs { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS");

        modelBuilder.Entity<Log>(entity =>
        {
            entity.Property(e => e.EventType).IsUnicode(false);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);

    public override async Task<int> SaveChangesAsync(CancellationToken cancellationToken = new CancellationToken()) {
        int result = await base.SaveChangesAsync(cancellationToken).ConfigureAwait(false);

        // ignore events if no dispatcher provided
        if (_mediator == null) return result;

        // dispatch events only if save was successful
        var entitiesWithEvents = ChangeTracker.Entries<BaseEntity>()
            .Select(e => e.Entity)
            .Where(e => e.Events.Any())
            .ToArray();

        foreach (var entity in entitiesWithEvents) {
            var events = entity.Events.ToArray();
            entity.Events.Clear();
            foreach (var domainEvent in events) {
                await _mediator.Publish(domainEvent).ConfigureAwait(false);
            }
        }

        return result;
    }

    public override int SaveChanges() {
        return SaveChangesAsync().GetAwaiter().GetResult();
    }

}
